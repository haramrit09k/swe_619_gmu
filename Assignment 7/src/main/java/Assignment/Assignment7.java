/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Assignment;

import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

public class Assignment7 {
	
    public static void main(String[] args) {
        // Lambda Implementation for AbsoluteValueComparator
        Comparator<Integer> comp = (o1, o2) -> Math.abs(o1) - Math.abs(o2);

        // TreeSet with AbsoluteValueComparator
        Set<Integer> treeSet = new TreeSet<Integer>((o1, o2) -> Math.abs(o1) - Math.abs(o2));
        System.out.println(treeSet.add(3));
        System.out.println(treeSet.add(4));
        System.out.println(treeSet.add(-6));
        System.out.println(treeSet.add(5));
        System.out.println(treeSet.add(-5));
        System.out.println(treeSet.add(-15));

        //HashSet
        Set<Integer> hashSet = new HashSet<Integer>();
        hashSet.add(3);
        hashSet.add(4);
        hashSet.add(-6);
        hashSet.add(5);
        hashSet.add(-5);
        hashSet.add(-15);
    }
}


// Classic Implementation of AbsoluteValueComparator
class AbsoluteValueComparator implements Comparator<Integer> {

    @Override
    public int compare(Integer o1, Integer o2) throws NullPointerException, ClassCastException {
        return Math.abs(o1.intValue()) - Math.abs(o2.intValue());
    }

}

class NormalComparator<T extends Comparable<T>> implements Comparator<T> {
    @Override
    public int compare(T o1, T o2) {
        return o1.compareTo(o2);
    }
}